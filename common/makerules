CC ?= gcc
LLC ?= llc
CLANG ?= clang

rwildcard=$(foreach d,$(wildcard $1*),$(call rwildcard,$d/,$2) $(filter $(subst *,%,$2),$d))

COMMON_DIR = $(dir $(abspath $(lastword $(MAKEFILE_LIST))))
COMMON_HEADERS = $(call rwildcard, $(COMMON_DIR)include, *.h)

KERNEL_TARGET_OBJECT = ${KERNEL_TARGET:=.o}
KERNEL_TARGET_LLC_OBJECT = ${KERNEL_TARGET:=.ll}
KERNEL_TARGET_DEPS ?=

USER_TARGET_DEPS ?=

LIBBPF_SRC_DIR = $(COMMON_DIR)../libbpf/src
LIBBPF_OUTPUT_DIR = $(COMMON_DIR)/libbpf
LIBBPF_TARGET = $(LIBBPF_OUTPUT_DIR)/libbpf.a

CFLAGS ?=
CFLAGS += "-I$(COMMON_DIR)/include/"
CFLAGS += "-I$(LIBBPF_OUTPUT_DIR)/usr/include/"
CFLAGS += "-I/usr/include/x86_64-linux-gnu"

.PHONY: all
all: $(KERNEL_TARGET_OBJECT) $(USER_TARGET)

$(LIBBPF_TARGET):
	@(if [ ! -d $(LIBBPF_SRC_DIR) ]; then \
		echo "Missing libbpf submodule please run 'git submodule update --init --recursive' at the root of this repo."; \
		exit 1; \
	fi)
	cd $(LIBBPF_SRC_DIR) \
	&& mkdir -p $(LIBBPF_OUTPUT_DIR) \
	&& OBJDIR=$(LIBBPF_OUTPUT_DIR) $(MAKE) all \
	&& DESTDIR=$(LIBBPF_OUTPUT_DIR) $(MAKE) install_headers

$(USER_TARGET): %: %.c $(USER_TARGET_DEPS) $(LIBBPF_TARGET) $(COMMON_HEADERS)
	$(CC) \
		$(CFLAGS) \
		-L$(LIBBPF_OUTPUT_DIR) \
		-Wall \
		-Wno-unused-variable \
		-Wno-unused-function \
		-O2 -g -o $@ $< \
		-l:libbpf.a -lbpf -lelf

$(KERNEL_TARGET_OBJECT): %.o: %.c $(KERNEL_TARGET_DEPS) $(COMMON_HEADERS)
	$(CLANG) -S \
	    -target bpf \
	    -D __BPF_TRACING__ \
	    $(CFLAGS) \
	    -Wall \
		-Wno-compare-distinct-pointer-types \
	    -O2 -emit-llvm -c -g -o $(KERNEL_TARGET_LLC_OBJECT) $<
	$(LLC) -march=bpf -filetype=obj -o $@ $(KERNEL_TARGET_LLC_OBJECT)

.PHONY: clean
clean:
	rm -f *.ll *.o $(USER_TARGET)

.PHONY: clean-libbpf
clean-libbpf:
	rm -rf $(LIBBPF_OUTPUT_DIR)
